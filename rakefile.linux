# per compilare con i file di risorse togliere i commenti (1)
# per usare con unit test togliere i commenti (2)
require 'rake/clean'
require 'rake/packagetask'

##################
# SETTING
##################
VERSION = '4.2.0'

SRC = FileList[ "*.cs", "iTextSharp/**/*.cs", "System/**/*.cs", "srcbc/**/*.cs"]

BASE_NAME = "itextsharp"
TARGET = 'library'
ASSEMBLY_UNDER_TEST = ""

TOP_DIR = ENV['CS_DIR']
LIB_DIR = "#{TOP_DIR}/lib"
BUILD_DIR = "bin/mono"
PUBLISH_DIR = "#{LIB_DIR}/#{BASE_NAME}/#{VERSION}"

REFS = [
#  "#{ASSEMBLY_UNDER_TEST}",
   "System.Drawing.dll"
]

EXTERNAL = {

}

#(1) RES_OPT = "-resource:resources/#{BASE_NAME}.resources,#{BASE_NAME}.resources"
RES_OPT = ""

#-pkg:glade-sharp-2.0  -pkg:mono-cairo -pkg:gtk-sharp-2.0
COMPILER_OPT = ''
REFERENCE_OPT = REFS.empty? ? "" : "-r:#{REFS.join(',')}"
PKG_FILES = FileList["#{BUILD_DIR}/*.exe", "#{BUILD_DIR}/*.dll", "#{BUILD_DIR}/*.log4net"]

##############################
# PROGRAM
##############################
CSC = "dmcs"
RESGEN = "resgen2"
NUNIT = "~/nunit4 -nologo"
NLOC = "~/nloc"
CTAGS = "etags"

##############################
# CODING
##############################

NAME = TARGET == 'library' ? "#{BASE_NAME}.dll" : "#{BASE_NAME}.exe"
FULL_NAME="#{BUILD_DIR}/#{NAME}"
  
CLOBBER.include("#{FULL_NAME}")

directory BUILD_DIR

task :default => :compile

desc "Aggiorna i file EXTERNAL"
task :up do
  Rake.application.invoke_task("update[f,f,f]")
end

# vedi http://stackoverflow.com/questions/825748/how-do-i-pass-command-line-arguments-to-a-rake-task

desc "Aggiorna i file esterni e visualizza le operazioni eseguite"
task :upv do
  Rake.application.invoke_task("update[t,f,f]")
end

desc "Forza l'aggiornamento"
task :upf do
  Rake.application.invoke_task("update[t,t,f]")
end
desc "Simula l'aggiornamento dei file esterni"
task :upd do
  Rake.application.invoke_task("update[f,f,t]")
end

desc "Compila!"
task :compile => FULL_NAME
#(1) file FULL_NAME => FileList[SRC, :generate_resources] do |t|
#(2) file FULL_NAME => FileList[SRC, "#{BUILD_DIR}/#{ASSEMBLY_UNDER_TEST}"] do |t|
file FULL_NAME => FileList[SRC] do |t|
  Rake::Task[:force].invoke
end

desc "Forza la compilazione"
task :force do
  sh "#{CSC} -debug #{COMPILER_OPT} -out:#{FULL_NAME} -target:#{TARGET} #{RES_OPT} -lib:#{BUILD_DIR} #{REFERENCE_OPT} #{SRC}"
end

desc "Aggiorna i file definiti in EXTERNAL"
task :update, [:verbose, :force, :dry] => BUILD_DIR do |t, args|
  EXTERNAL.each do |src, trgt| 
    if File.exists?(src)
      if uptodate?(src, [trgt]) or args[:force] == 't'
        if args[:dry] == 't'
          puts "cp #{src}, #{trgt}, :verbose => true"
        else
          cp src, trgt, :verbose => true
        end
      else 
        puts "not updated: #{src}" if (args[:verbose] == 't')
      end
    else 
      puts "doesn't exist: #{src}"
    end
  end
end

desc "Compila i file di risorse"
task :generate_resources => "resources/#{BASE_NAME}.resources"

file "resources/#{BASE_NAME}.resources" => "resources/#{BASE_NAME}.resX" do |t|
  sh "#{RESGEN} #{t.prerequisites[0]} #{t.name}" 
end

desc "Esegue i test"
task :test => FULL_NAME do |t|
  sh "#{NUNIT} #{t.prerequisites[0]} #{ENV['TF']}"
end

file "#{BUILD_DIR}/#{ASSEMBLY_UNDER_TEST}" => "../#{BUILD_DIR}/#{ASSEMBLY_UNDER_TEST}" do |t|
  cp t.prerequisites[0], t.name, :verbose=>true
end

desc "Conta le righe di codice"
task :loc do
  sh "#{NLOC} -nologo -percentage #{SRC}"
end



desc "Create tags file"
task :tags => SRC do
  sh "#{CTAGS} #{SRC}"
end

task :todo do
  sh "grep -P '.*(FIXME|TODO|TBD)' *.cs"
end
directory PUBLISH_DIR
desc "Pubblica l'assembly compilato"
#task :publish => [FULL_NAME, PUBLISH_DIR, :publish_po] do
task :publish => [FULL_NAME, PUBLISH_DIR] do
   sh "cp #{FULL_NAME} #{PUBLISH_DIR}"
end

task :publish_po  do 
  sh "cp -r locale #{PUBLISH_DIR}"
end

desc "Crea uno script per la compilazione"
task :make_script do
  File.open('build.sh', 'w') do |file|
    file.puts "#{CSC} -debug #{COMPILER_OPT} -out:#{FULL_NAME} -target:#{TARGET} #{RES_OPT} -lib:#{BUILD_DIR} #{REFERENCE_OPT} #{SRC}"
  end
end

desc "Visualizza la versione"
task :ver do
  puts "#{VERSION}"
end

desc "Visualizza la directory di pubblicazione"
task :print_publish_dir do
  puts "#{PUBLISH_DIR}"
end

desc "Aggiorna, compila e pubblica"
task :all => [:up, :compile, :publish]

Rake::PackageTask.new(BASE_NAME, VERSION) do |p|
  p.need_tar_bz2 = true
  p.need_zip = false
  p.need_tar = false
  p.package_files = PKG_FILES
end

desc "Crea un backup dei sorgenti"
task :src_pkg do
  system "tar -cjf #{BASE_NAME}_src-#{VERSION}.tar.bz2 #{SRC}"
end